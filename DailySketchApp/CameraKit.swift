//
//  CameraKit.swift
//
//  Created on 5/3/16.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class CameraKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawCamera(frame frame: CGRect = CGRect(x: 0, y: 0, width: 354, height: 342), resizing: ResizingBehavior = .AspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 354, height: 342), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 354, height: resizedFrame.height / 342)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        
        /// Camera
        do {
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 79, 109)
            
            /// Camera
            do {
                CGContextSaveGState(context)
                
                /// Rectangle 7 Copy 2
                let rectangle7Copy2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 196, height: 97.59), cornerRadius: 10.2)
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 0, 26.41)
                UIColor.whiteColor().setFill()
                rectangle7Copy2.fill()
                CGContextSaveGState(context)
                rectangle7Copy2.lineWidth = 17.85
                CGContextBeginPath(context)
                CGContextAddPath(context, rectangle7Copy2.CGPath)
                CGContextEOClip(context)
                UIColor.blackColor().setStroke()
                rectangle7Copy2.stroke()
                CGContextRestoreGState(context)
                CGContextRestoreGState(context)
                
                /// Rectangle 7 Copy 3
                let rectangle7Copy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 155.65, height: 34.44), cornerRadius: 10.2)
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 40.35, 0)
                UIColor.whiteColor().setFill()
                rectangle7Copy3.fill()
                CGContextSaveGState(context)
                rectangle7Copy3.lineWidth = 17.85
                CGContextBeginPath(context)
                CGContextAddPath(context, rectangle7Copy3.CGPath)
                CGContextEOClip(context)
                UIColor.blackColor().setStroke()
                rectangle7Copy3.stroke()
                CGContextRestoreGState(context)
                CGContextRestoreGState(context)
                
                /// Oval 2 + Oval 2 Copy 3 + Oval 2 Copy 2
                do {
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 62.26, 39.04)
                    
                    /// Oval 2
                    let oval2 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 71.48, height: 71.19))
                    CGContextSaveGState(context)
                    UIColor.whiteColor().setFill()
                    oval2.fill()
                    oval2.lineWidth = 7.65
                    UIColor.blackColor().setStroke()
                    oval2.stroke()
                    CGContextRestoreGState(context)
                    
                    /// Oval 2 Copy 3
                    let oval2Copy3 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 71.48, height: 71.19))
                    CGContextSaveGState(context)
                    UIColor.whiteColor().setFill()
                    oval2Copy3.fill()
                    oval2Copy3.lineWidth = 7.65
                    UIColor.blackColor().setStroke()
                    oval2Copy3.stroke()
                    CGContextRestoreGState(context)
                    
                    /// Oval 2 Copy 2
                    let oval2Copy2 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 45.4, height: 45.21))
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 13.52, 12.51)
                    UIColor.whiteColor().setFill()
                    oval2Copy2.fill()
                    oval2Copy2.lineWidth = 7.65
                    UIColor.blackColor().setStroke()
                    oval2Copy2.stroke()
                    CGContextRestoreGState(context)
                    
                    CGContextRestoreGState(context)
                }
                
                /// Line
                let line = UIBezierPath()
                line.moveToPoint(CGPoint(x: 2.31, y: 0.57))
                line.addLineToPoint(CGPoint(x: 2.31, y: 32.72))
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 191.39, 19.52)
                line.lineCapStyle = .Square
                line.lineWidth = 5.1
                UIColor.blackColor().setStroke()
                line.stroke()
                CGContextRestoreGState(context)
                
                /// Rectangle 11
                let rectangle11 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 28.82, height: 25.26), cornerRadius: 10.2)
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 8.07, 6.89)
                CGContextSaveGState(context)
                rectangle11.lineWidth = 17.85
                CGContextBeginPath(context)
                CGContextAddPath(context, rectangle11.CGPath)
                CGContextEOClip(context)
                UIColor.blackColor().setStroke()
                rectangle11.stroke()
                CGContextRestoreGState(context)
                CGContextRestoreGState(context)
                
                /// Line
                let line2 = UIBezierPath()
                line2.moveToPoint(CGPoint(x: 0, y: 1.15))
                line2.addLineToPoint(CGPoint(x: 20.75, y: 1.15))
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 88.2, 16.65)
                line2.lineCapStyle = .Round
                line2.lineWidth = 8.92
                UIColor.blackColor().setStroke()
                line2.stroke()
                CGContextRestoreGState(context)
                
                /// Line Copy 2
                let lineCopy2 = UIBezierPath()
                lineCopy2.moveToPoint(CGPoint(x: 0.58, y: 1.72))
                lineCopy2.addLineToPoint(CGPoint(x: 17.87, y: 1.72))
                CGContextSaveGState(context)
                CGContextTranslateCTM(context, 155.65, 14.93)
                lineCopy2.lineCapStyle = .Round
                lineCopy2.lineWidth = 8.92
                UIColor.blackColor().setStroke()
                lineCopy2.stroke()
                CGContextRestoreGState(context)
                
                CGContextRestoreGState(context)
            }
            
            CGContextRestoreGState(context)
        }
        
        CGContextRestoreGState(context)
    }
    
    
    //MARK: - Canvas Images
    
    /// Page 1
    
    class func imageOfCamera(size size: CGSize = CGSize(width: 354, height: 342), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        CameraKit.drawCamera(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .AspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .AspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .Stretch:
                    break
                case .Center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
