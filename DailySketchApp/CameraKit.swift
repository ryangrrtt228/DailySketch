//
//  CameraKit.swift
//  DS
//
//  Created by Ryan on 5/10/16.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class CameraKit: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// DS MAIN
    
    class func drawCamera(frame frame: CGRect = CGRect(x: 0, y: 0, width: 382, height: 316), resizing: ResizingBehavior = .AspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize To Frame
        CGContextSaveGState(context)
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 382, height: 316), target: frame)
        CGContextTranslateCTM(context, resizedFrame.minX, resizedFrame.minY)
        let resizedScale = CGSize(width: resizedFrame.width / 382, height: resizedFrame.height / 316)
        CGContextScaleCTM(context, resizedScale.width, resizedScale.height)
        
        /// Group 3
        do {
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 40, 63)
            
            /// Line
            let line = UIBezierPath()
            line.moveToPoint(CGPoint(x: 3.56, y: 0.89))
            line.addLineToPoint(CGPoint(x: 3.56, y: 50.93))
            CGContextSaveGState(context)
            CGContextTranslateCTM(context, 295.1, 31.73)
            line.lineCapStyle = .Square
            line.lineWidth = 7.88
            UIColor.blackColor().setStroke()
            line.stroke()
            CGContextRestoreGState(context)
            
            /// Group 2
            do {
                CGContextSaveGState(context)
                
                /// Group
                do {
                    CGContextSaveGState(context)
                    
                    /// Rectangle 7 Copy 2
                    let rectangle7Copy2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 303, height: 151.9), cornerRadius: 15.75)
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 0, 41.1)
                    UIColor.whiteColor().setFill()
                    rectangle7Copy2.fill()
                    CGContextSaveGState(context)
                    rectangle7Copy2.lineWidth = 27.56
                    CGContextBeginPath(context)
                    CGContextAddPath(context, rectangle7Copy2.CGPath)
                    CGContextEOClip(context)
                    UIColor.blackColor().setStroke()
                    rectangle7Copy2.stroke()
                    CGContextRestoreGState(context)
                    CGContextRestoreGState(context)
                    
                    /// Rectangle 7 Copy 3
                    let rectangle7Copy3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 240.62, height: 53.61), cornerRadius: 15.75)
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 62.38, 0)
                    UIColor.whiteColor().setFill()
                    rectangle7Copy3.fill()
                    CGContextSaveGState(context)
                    rectangle7Copy3.lineWidth = 27.56
                    CGContextBeginPath(context)
                    CGContextAddPath(context, rectangle7Copy3.CGPath)
                    CGContextEOClip(context)
                    UIColor.blackColor().setStroke()
                    rectangle7Copy3.stroke()
                    CGContextRestoreGState(context)
                    CGContextRestoreGState(context)
                    
                    /// Oval 2 + Oval 2 Copy 3 + Oval 2 Copy 2
                    do {
                        CGContextSaveGState(context)
                        CGContextTranslateCTM(context, 97.14, 60.81)
                        
                        /// Oval 2
                        let oval2 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 110.51, height: 110.8))
                        CGContextSaveGState(context)
                        UIColor.whiteColor().setFill()
                        oval2.fill()
                        oval2.lineWidth = 11.81
                        UIColor.blackColor().setStroke()
                        oval2.stroke()
                        CGContextRestoreGState(context)
                        
                        /// Oval 2 Copy 3
                        let oval2Copy3 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 110.51, height: 110.8))
                        CGContextSaveGState(context)
                        UIColor.whiteColor().setFill()
                        oval2Copy3.fill()
                        oval2Copy3.lineWidth = 11.81
                        UIColor.blackColor().setStroke()
                        oval2Copy3.stroke()
                        CGContextRestoreGState(context)
                        
                        /// Oval 2 Copy 2
                        let oval2Copy2 = UIBezierPath(ovalInRect: CGRect(x: 0, y: 0, width: 70.19, height: 70.37))
                        CGContextSaveGState(context)
                        CGContextTranslateCTM(context, 20.91, 19.46)
                        UIColor.whiteColor().setFill()
                        oval2Copy2.fill()
                        oval2Copy2.lineWidth = 11.81
                        UIColor.blackColor().setStroke()
                        oval2Copy2.stroke()
                        CGContextRestoreGState(context)
                        
                        CGContextRestoreGState(context)
                    }
                    
                    /// Rectangle 11
                    let rectangle11 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 44.56, height: 39.31), cornerRadius: 15.75)
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 12.48, 10.72)
                    UIColor.whiteColor().setFill()
                    rectangle11.fill()
                    CGContextSaveGState(context)
                    rectangle11.lineWidth = 27.56
                    CGContextBeginPath(context)
                    CGContextAddPath(context, rectangle11.CGPath)
                    CGContextEOClip(context)
                    UIColor.blackColor().setStroke()
                    rectangle11.stroke()
                    CGContextRestoreGState(context)
                    CGContextRestoreGState(context)
                    
                    /// Line
                    let line2 = UIBezierPath()
                    line2.moveToPoint(CGPoint(x: 0, y: 1.79))
                    line2.addLineToPoint(CGPoint(x: 32.08, y: 1.79))
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 136.35, 25.91)
                    line2.lineCapStyle = .Round
                    line2.lineWidth = 13.78
                    UIColor.blackColor().setStroke()
                    line2.stroke()
                    CGContextRestoreGState(context)
                    
                    /// Line Copy 2
                    let lineCopy2 = UIBezierPath()
                    lineCopy2.moveToPoint(CGPoint(x: 0.89, y: 2.68))
                    lineCopy2.addLineToPoint(CGPoint(x: 27.63, y: 2.68))
                    CGContextSaveGState(context)
                    CGContextTranslateCTM(context, 240.62, 23.23)
                    lineCopy2.lineCapStyle = .Round
                    lineCopy2.lineWidth = 13.78
                    UIColor.blackColor().setStroke()
                    lineCopy2.stroke()
                    CGContextRestoreGState(context)
                    
                    CGContextRestoreGState(context)
                }
                
                CGContextRestoreGState(context)
            }
            
            CGContextRestoreGState(context)
        }
        
        CGContextRestoreGState(context)
    }
    
    
    //MARK: - Canvas Images
    
    /// DS MAIN
    
    class func imageOfCamera(size size: CGSize = CGSize(width: 382, height: 316), resizing: ResizingBehavior = .AspectFit) -> UIImage {
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(size, false, 0)
        CameraKit.drawCamera(frame: CGRect(origin: CGPoint.zero, size: size), resizing: resizing)
        image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case AspectFit /// The content is proportionally resized to fit into the target rectangle.
        case AspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case Stretch /// The content is stretched to match the entire target rectangle.
        case Center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .AspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .AspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .Stretch:
                    break
                case .Center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
